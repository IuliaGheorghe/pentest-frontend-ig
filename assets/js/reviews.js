// array of objects with all info from all reviews 

let reviews = [
    {
        author: {
            name: "Ioan Constantin",
            image:{
                src: "assets/media/images/reviews/Ioan Constantin.jpeg",
                alt: "Ioan Constantin"
            }, 
            work:{
                function: "Cyber Security Expert",
                company: "Orange",
                industry: "Telecom",
            }
        },

        reviewStars: (Math.random() * (5 - 4.5) + 4.5).toFixed(2),

        reviewHTMLContent: '"We teamed up with Pentest-Tools.com nearly 3 years ago and offered their great Web Vulnerability Assessment tools in our <a href="https://threatmap.ro/" target="_blank">threatmap.ro</a> platform, offering free, one-click quick scans for our user base. <br><br> "We absolutely loved the experience, so far :) and appreciate the great collaboration with their team and how easy it is to work with them in demanding projects such as Threatmap.<br><br><span class="read-full-review">Read the full review >></span><div class="read-more-content"><img src="assets/media/images/reviews/Orange-Pic.png" alt="orange-map"/><p>Having access to a well-documented API was key for the successful integration of Threatmap and Pentest-Tools.com and the girls and guys over there delivered a great API, were prompt in answering our feedback and supporting our needs for some over-the-top custom integration requirements. <br><br> We\'re pushing forward with new iterations of Threatmap, new use-cases and as we expand our user-base, Pentest-Tools.com remains one of the core tools we\'re using to push forward innovation, awareness and technology.‚Äù</p></div>',

        reviewTags: ["ease of use", "great reporting capabilities"]

    },

]

let reviewsSection = document.getElementById("reviews-section");

for(let i=0; i<reviews.length; i++){

    // create a container (div) for each review, append it to the reviews section and add .review class for styling

    let review = document.createElement("div");
    review.classList.add("review");
    reviewsSection.appendChild(review);

    // template for review content

    review.innerHTML = '<div class="review-author"><div class="review-author-image"><img src=""/></div><div class="review-author-details"><div class="review-author-name"><hr/></div><div class="review-author-work"><div class="review-author-function"><i class="fa-solid fa-briefcase"></i><span></span></div><div class="review-author-company"><i class="fa-solid fa-building"></i><span></span></div><div class="review-author-industry"><i class="fa-solid fa-industry"></i><span></span></div></div></div></div><div class="review-stars"><div class="stars"><i class="fa-solid fa-star"></i><i class="fa-solid fa-star"></i><i class="fa-solid fa-star"></i><i class="fa-solid fa-star"></i><i class="fa-solid fa-star"></i></div><div class="review-score"></div></div><div class="review-content"><p></p></div><div class="review-tags"></div>'

    // author image
    
    let reviewAuthorImgSrc = review.querySelectorAll(".review-author-image img")[0];
    reviewAuthorImgSrc.src = reviews[i].author.image.src;
    reviewAuthorImgSrc.alt = reviews[i].author.image.alt;

    // author info 

    let reviewAuthorName = review.querySelectorAll(".review-author-name")[0];
    reviewAuthorName.innerHTML = reviews[i].author.name + "<hr/>";

    let reviewAuthorFunction = review.querySelectorAll(".review-author-function span")[0];
    reviewAuthorFunction.innerText = reviews[i].author.work.function;

    let reviewAuthorCompany= review.querySelectorAll(".review-author-company span")[0];
    reviewAuthorCompany.innerText = reviews[i].author.work.company;

    let reviewAuthorIndustry= review.querySelectorAll(".review-author-industry span")[0];
    reviewAuthorIndustry.innerText = reviews[i].author.work.industry;

    // stars logic

    /*

        - GET [x] from star percentage
        - [x] --> n stars to be filled 100%

        - GET {x} from star percentage
        - for star [x]+1 fill {x} percentage

    */

        let xInt = Math.trunc(reviews[i].reviewStars);
        let xFt = reviews[i].reviewStars - xInt;

        let stars = review.querySelectorAll(".review-stars .stars .fa-solid")

        for(let k = 0; k < xInt; k++)
            // fill [x] stars completely
            stars[k].style.color = "yellow";

        let lastStarProps = stars[xInt];

            // fill {x}*100 % of last star by adding the right class to its classlist (assets/css/star-fill.css)
        lastStarProps.classList.add("fa-star-"+Math.ceil(xFt*100));

    // ends stars logic

    // show stars score
    let reviewStarsScore = review.querySelectorAll(".review-score")[0];
    reviewStarsScore.innerText = reviews[i].reviewStars + " / 5.00";

    // show review HTML content
    let reviewContent = review.querySelectorAll(".review-content p")[0];
    reviewContent.innerHTML = reviews[i].reviewHTMLContent;

    // show review tags (like ease of use etc)

    let reviewTags = review.querySelectorAll(".review-tags")[0];
    
    // from the stored array of review tags, get each element and create a container for its content
    for(let j = 0; j < reviews[i].reviewTags.length; j++){

        let reviewTag = document.createElement("div");
        reviewTag.classList.add("review-tag");
        reviewTags.appendChild(reviewTag);

        reviewTag.innerText = reviews[i].reviewTags[j];
    }


}

// store all "read full review" btns (considering we'll have more reviews displayed in the future)

let reviewReadMoreLink = document.getElementsByClassName("read-full-review");

// for each "read full review" create functionality (show/hide more content)
for(let i = 0; i < reviewReadMoreLink.length; i++)
    reviewReadMoreLink[i].addEventListener("click", readMoreReview);


function readMoreReview(){

    // if next sibling (the actual read more content for the pressed btn) is shown, hide it and set btn text to default (read full...)

    if(this.nextSibling.style.display === "flex"){
        this.nextSibling.style.display = "none";
        this.innerText = "Read the full review >>";
    }

    // else if next sibling (the actual read more content for the pressed btn) is hidden, show it and set btn text to read less

    else{
        this.nextSibling.style.display = "flex";
        this.innerText = "Read less <<";
    
    }

}

// due to the fact reviews are placed dynamically inside the reviews section, I have to do the same with the Call To Action Btn (added .review-CTA class for styling and also created text content for the btn) 

let reviewCTA = document.createElement("button");
reviewCTA.classList.add("review-CTA");
reviewCTA.innerText = "Read all the reviews from our customers"
reviewsSection.appendChild(reviewCTA);